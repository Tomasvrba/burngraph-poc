// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AnonymousDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AnonymousDeposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AnonymousDeposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AnonymousDeposit", id.toString(), this);
  }

  static load(id: string): AnonymousDeposit | null {
    return store.get("AnonymousDeposit", id) as AnonymousDeposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get SenderAddr(): Bytes {
    let value = this.get("SenderAddr");
    return value.toBytes();
  }

  set SenderAddr(value: Bytes) {
    this.set("SenderAddr", Value.fromBytes(value));
  }

  get ContriValue(): BigInt {
    let value = this.get("ContriValue");
    return value.toBigInt();
  }

  set ContriValue(value: BigInt) {
    this.set("ContriValue", Value.fromBigInt(value));
  }

  get PropName(): string {
    let value = this.get("PropName");
    return value.toString();
  }

  set PropName(value: string) {
    this.set("PropName", Value.fromString(value));
  }

  get Choice(): string {
    let value = this.get("Choice");
    return value.toString();
  }

  set Choice(value: string) {
    this.set("Choice", Value.fromString(value));
  }
}

export class newProposalIssued extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save newProposalIssued entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save newProposalIssued entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("newProposalIssued", id.toString(), this);
  }

  static load(id: string): newProposalIssued | null {
    return store.get("newProposalIssued", id) as newProposalIssued | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issuer(): Bytes {
    let value = this.get("issuer");
    return value.toBytes();
  }

  set issuer(value: Bytes) {
    this.set("issuer", Value.fromBytes(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get data(): string {
    let value = this.get("data");
    return value.toString();
  }

  set data(value: string) {
    this.set("data", Value.fromString(value));
  }

  get optionA(): string {
    let value = this.get("optionA");
    return value.toString();
  }

  set optionA(value: string) {
    this.set("optionA", Value.fromString(value));
  }

  get optionAaddr(): Bytes {
    let value = this.get("optionAaddr");
    return value.toBytes();
  }

  set optionAaddr(value: Bytes) {
    this.set("optionAaddr", Value.fromBytes(value));
  }

  get optionB(): string {
    let value = this.get("optionB");
    return value.toString();
  }

  set optionB(value: string) {
    this.set("optionB", Value.fromString(value));
  }

  get optionBaddr(): Bytes {
    let value = this.get("optionBaddr");
    return value.toBytes();
  }

  set optionBaddr(value: Bytes) {
    this.set("optionBaddr", Value.fromBytes(value));
  }
}
